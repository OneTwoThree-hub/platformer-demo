// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level2":
            case "level2":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level1":
            case "level1":return tiles.createTilemap(hex`3c0009000a`, img`
222222222222222222222222222222222222222222222222222222222222
2..........................................................2
2..........................................................2
2....................2.....................................2
2................2...2.....................................2
2............2...2...2.....................................2
2........2...2...2...2.....................................2
2222222..2...2...2...2..222222222222222222222222222222222222
......2..2...2...2...2..2...................................
`, [myTiles.transparency16,sprites.builtin.forestTiles10,sprites.builtin.forestTiles6,sprites.builtin.forestTiles13,sprites.builtin.forestTiles9,sprites.builtin.forestTiles15,sprites.builtin.forestTiles7,sprites.builtin.forestTiles11,sprites.dungeon.hazardLava1,sprites.dungeon.collectibleRedCrystal,sprites.builtin.forestTiles5], TileScale.Sixteen);
            case "level0":
            case "level3":return tiles.createTilemap(hex`3c`, img`
222222222222222222222222222222222222222222222222222222222222
2..........................................................2
2..........................................................2
2....................2.....................................2
2................2...2.....................................2
2............2...2...2.....................................2
2........2...2...2...2.....................................2
2222222..2...2...2...2..222222222222222222222222222222222222
......2..2...2...2...2..2...................................
`, [myTiles.transparency16,sprites.builtin.forestTiles10,sprites.builtin.forestTiles6,sprites.builtin.forestTiles13,sprites.builtin.forestTiles9,sprites.builtin.forestTiles15,sprites.builtin.forestTiles7,sprites.builtin.forestTiles11,sprites.dungeon.hazardLava1], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex`3c`, img`
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
`, [myTiles.transparency16,sprites.builtin.brick,myTiles.tile1,myTiles.tile2], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
            case "myTile0":
            case "tile2":return tile2;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
